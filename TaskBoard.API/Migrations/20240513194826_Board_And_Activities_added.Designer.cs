// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TaskBoard.API.DbContexts;

#nullable disable

namespace TaskBoard.API.Migrations
{
    [DbContext(typeof(TaskBoardContext))]
    [Migration("20240513194826_Board_And_Activities_added")]
    partial class Board_And_Activities_added
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TaskBoard.API.Entities.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CardId")
                        .HasColumnType("integer");

                    b.Property<int>("ListId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("OperationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OperationName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ValueAfter")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ValueBefore")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.ToTable("Activities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CardId = 1,
                            ListId = 1,
                            OperationDate = new DateTime(2024, 5, 13, 19, 48, 24, 369, DateTimeKind.Utc).AddTicks(750),
                            OperationName = "add",
                            ValueAfter = "Card Name 1",
                            ValueBefore = ""
                        },
                        new
                        {
                            Id = 2,
                            CardId = 2,
                            ListId = 1,
                            OperationDate = new DateTime(2024, 5, 13, 19, 48, 24, 369, DateTimeKind.Utc).AddTicks(752),
                            OperationName = "add",
                            ValueAfter = "Card 2",
                            ValueBefore = ""
                        },
                        new
                        {
                            Id = 3,
                            CardId = 3,
                            ListId = 1,
                            OperationDate = new DateTime(2024, 5, 13, 19, 48, 24, 369, DateTimeKind.Utc).AddTicks(753),
                            OperationName = "add",
                            ValueAfter = "Card Name 3",
                            ValueBefore = ""
                        },
                        new
                        {
                            Id = 4,
                            CardId = 4,
                            ListId = 1,
                            OperationDate = new DateTime(2024, 5, 13, 19, 48, 24, 369, DateTimeKind.Utc).AddTicks(754),
                            OperationName = "add",
                            ValueAfter = "Card 4",
                            ValueBefore = ""
                        },
                        new
                        {
                            Id = 5,
                            CardId = 5,
                            ListId = 1,
                            OperationDate = new DateTime(2024, 5, 13, 19, 48, 24, 369, DateTimeKind.Utc).AddTicks(756),
                            OperationName = "add",
                            ValueAfter = "Card Name 5",
                            ValueBefore = ""
                        },
                        new
                        {
                            Id = 6,
                            CardId = 6,
                            ListId = 2,
                            OperationDate = new DateTime(2024, 5, 13, 19, 48, 24, 369, DateTimeKind.Utc).AddTicks(757),
                            OperationName = "add",
                            ValueAfter = "Card 6",
                            ValueBefore = ""
                        },
                        new
                        {
                            Id = 7,
                            CardId = 7,
                            ListId = 2,
                            OperationDate = new DateTime(2024, 5, 13, 19, 48, 24, 369, DateTimeKind.Utc).AddTicks(758),
                            OperationName = "add",
                            ValueAfter = "Card Name 7",
                            ValueBefore = ""
                        },
                        new
                        {
                            Id = 8,
                            CardId = 8,
                            ListId = 2,
                            OperationDate = new DateTime(2024, 5, 13, 19, 48, 24, 369, DateTimeKind.Utc).AddTicks(760),
                            OperationName = "add",
                            ValueAfter = "Card 8",
                            ValueBefore = ""
                        },
                        new
                        {
                            Id = 9,
                            CardId = 9,
                            ListId = 2,
                            OperationDate = new DateTime(2024, 5, 13, 19, 48, 24, 369, DateTimeKind.Utc).AddTicks(761),
                            OperationName = "add",
                            ValueAfter = "Card Name 9",
                            ValueBefore = ""
                        },
                        new
                        {
                            Id = 10,
                            CardId = 10,
                            ListId = 2,
                            OperationDate = new DateTime(2024, 5, 13, 19, 48, 24, 369, DateTimeKind.Utc).AddTicks(762),
                            OperationName = "add",
                            ValueAfter = "Card 10",
                            ValueBefore = ""
                        },
                        new
                        {
                            Id = 11,
                            CardId = 11,
                            ListId = 3,
                            OperationDate = new DateTime(2024, 5, 13, 19, 48, 24, 369, DateTimeKind.Utc).AddTicks(763),
                            OperationName = "add",
                            ValueAfter = "Card 11",
                            ValueBefore = ""
                        },
                        new
                        {
                            Id = 12,
                            CardId = 12,
                            ListId = 4,
                            OperationDate = new DateTime(2024, 5, 13, 19, 48, 24, 369, DateTimeKind.Utc).AddTicks(765),
                            OperationName = "add",
                            ValueAfter = "Card 12",
                            ValueBefore = ""
                        },
                        new
                        {
                            Id = 13,
                            CardId = 13,
                            ListId = 4,
                            OperationDate = new DateTime(2024, 5, 13, 19, 48, 24, 369, DateTimeKind.Utc).AddTicks(766),
                            OperationName = "add",
                            ValueAfter = "Card 13",
                            ValueBefore = ""
                        });
                });

            modelBuilder.Entity("TaskBoard.API.Entities.Board", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Boards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "First Board"
                        });
                });

            modelBuilder.Entity("TaskBoard.API.Entities.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ListId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ListId");

                    b.ToTable("Cards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Task description should be unambiguous, accurate, factual.",
                            DueDate = new DateTime(2024, 5, 14, 19, 48, 24, 369, DateTimeKind.Utc).AddTicks(662),
                            ListId = 1,
                            Name = "Card Name 1",
                            Priority = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Task description should be unambiguous, accurate, factual.",
                            DueDate = new DateTime(2024, 5, 14, 19, 48, 24, 369, DateTimeKind.Utc).AddTicks(673),
                            ListId = 1,
                            Name = "Card 2",
                            Priority = 2
                        },
                        new
                        {
                            Id = 3,
                            Description = "Task description should be unambiguous, accurate, factual.",
                            DueDate = new DateTime(2024, 5, 14, 19, 48, 24, 369, DateTimeKind.Utc).AddTicks(676),
                            ListId = 1,
                            Name = "Card Name 3",
                            Priority = 3
                        },
                        new
                        {
                            Id = 4,
                            Description = "Task description should be unambiguous, accurate, factual.",
                            DueDate = new DateTime(2024, 5, 14, 19, 48, 24, 369, DateTimeKind.Utc).AddTicks(678),
                            ListId = 1,
                            Name = "Card 4",
                            Priority = 1
                        },
                        new
                        {
                            Id = 5,
                            Description = "Task description should be unambiguous, accurate, factual.",
                            DueDate = new DateTime(2024, 5, 14, 19, 48, 24, 369, DateTimeKind.Utc).AddTicks(680),
                            ListId = 1,
                            Name = "Card Name 5",
                            Priority = 2
                        },
                        new
                        {
                            Id = 6,
                            Description = "Task description should be unambiguous, accurate, factual.",
                            DueDate = new DateTime(2024, 5, 14, 19, 48, 24, 369, DateTimeKind.Utc).AddTicks(682),
                            ListId = 2,
                            Name = "Card 6",
                            Priority = 3
                        },
                        new
                        {
                            Id = 7,
                            Description = "Task description should be unambiguous, accurate, factual.",
                            DueDate = new DateTime(2024, 5, 14, 19, 48, 24, 369, DateTimeKind.Utc).AddTicks(684),
                            ListId = 2,
                            Name = "Card Name 7",
                            Priority = 1
                        },
                        new
                        {
                            Id = 8,
                            Description = "Task description should be unambiguous, accurate, factual.",
                            DueDate = new DateTime(2024, 5, 14, 19, 48, 24, 369, DateTimeKind.Utc).AddTicks(686),
                            ListId = 2,
                            Name = "Card 8",
                            Priority = 2
                        },
                        new
                        {
                            Id = 9,
                            Description = "Task description should be unambiguous, accurate, factual.",
                            DueDate = new DateTime(2024, 5, 14, 19, 48, 24, 369, DateTimeKind.Utc).AddTicks(689),
                            ListId = 2,
                            Name = "Card Name 9",
                            Priority = 3
                        },
                        new
                        {
                            Id = 10,
                            Description = "Task description should be unambiguous, accurate, factual.",
                            DueDate = new DateTime(2024, 5, 14, 19, 48, 24, 369, DateTimeKind.Utc).AddTicks(691),
                            ListId = 2,
                            Name = "Card 10",
                            Priority = 1
                        },
                        new
                        {
                            Id = 11,
                            Description = "Task description should be unambiguous, accurate, factual.",
                            DueDate = new DateTime(2024, 5, 14, 19, 48, 24, 369, DateTimeKind.Utc).AddTicks(692),
                            ListId = 3,
                            Name = "Card 11",
                            Priority = 1
                        },
                        new
                        {
                            Id = 12,
                            Description = "Task description should be unambiguous, accurate, factual.",
                            DueDate = new DateTime(2024, 5, 14, 19, 48, 24, 369, DateTimeKind.Utc).AddTicks(694),
                            ListId = 4,
                            Name = "Card 12",
                            Priority = 1
                        },
                        new
                        {
                            Id = 13,
                            Description = "Task description should be unambiguous, accurate, factual.",
                            DueDate = new DateTime(2024, 5, 14, 19, 48, 24, 369, DateTimeKind.Utc).AddTicks(696),
                            ListId = 4,
                            Name = "Card 13",
                            Priority = 1
                        });
                });

            modelBuilder.Entity("TaskBoard.API.Entities.List", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BoardId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.ToTable("Lists");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BoardId = 1,
                            Name = "First List"
                        },
                        new
                        {
                            Id = 2,
                            BoardId = 1,
                            Name = "Second List"
                        },
                        new
                        {
                            Id = 3,
                            BoardId = 1,
                            Name = "Third List"
                        },
                        new
                        {
                            Id = 4,
                            BoardId = 1,
                            Name = "Fourth List"
                        });
                });

            modelBuilder.Entity("TaskBoard.API.Entities.Activity", b =>
                {
                    b.HasOne("TaskBoard.API.Entities.Card", null)
                        .WithMany("Activities")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskBoard.API.Entities.Card", b =>
                {
                    b.HasOne("TaskBoard.API.Entities.List", null)
                        .WithMany("Cards")
                        .HasForeignKey("ListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskBoard.API.Entities.List", b =>
                {
                    b.HasOne("TaskBoard.API.Entities.Board", null)
                        .WithMany("Lists")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskBoard.API.Entities.Board", b =>
                {
                    b.Navigation("Lists");
                });

            modelBuilder.Entity("TaskBoard.API.Entities.Card", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("TaskBoard.API.Entities.List", b =>
                {
                    b.Navigation("Cards");
                });
#pragma warning restore 612, 618
        }
    }
}
