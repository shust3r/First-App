// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TaskBoard.API.DbContexts;

#nullable disable

namespace TaskBoard.API.Migrations
{
    [DbContext(typeof(TaskBoardContext))]
    partial class TaskBoardContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TaskBoard.API.Entities.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<int>("ListId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ListId");

                    b.ToTable("Cards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Task description should be unambiguous, accurate, factual.",
                            ListId = 1,
                            ModifiedDate = new DateTime(2024, 4, 29, 12, 47, 43, 394, DateTimeKind.Utc).AddTicks(7767),
                            Name = "Card Name 1",
                            Priority = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Task description should be unambiguous, accurate, factual.",
                            ListId = 1,
                            ModifiedDate = new DateTime(2024, 4, 30, 12, 47, 43, 394, DateTimeKind.Utc).AddTicks(7775),
                            Name = "Card 2",
                            Priority = 2
                        },
                        new
                        {
                            Id = 3,
                            Description = "Task description should be unambiguous, accurate, factual.",
                            ListId = 1,
                            ModifiedDate = new DateTime(2024, 5, 1, 12, 47, 43, 394, DateTimeKind.Utc).AddTicks(7776),
                            Name = "Card Name 3",
                            Priority = 3
                        },
                        new
                        {
                            Id = 4,
                            Description = "Task description should be unambiguous, accurate, factual.",
                            ListId = 1,
                            ModifiedDate = new DateTime(2024, 5, 2, 12, 47, 43, 394, DateTimeKind.Utc).AddTicks(7778),
                            Name = "Card 4",
                            Priority = 1
                        },
                        new
                        {
                            Id = 5,
                            Description = "Task description should be unambiguous, accurate, factual.",
                            ListId = 1,
                            ModifiedDate = new DateTime(2024, 5, 3, 12, 47, 43, 394, DateTimeKind.Utc).AddTicks(7779),
                            Name = "Card Name 5",
                            Priority = 2
                        },
                        new
                        {
                            Id = 6,
                            Description = "Task description should be unambiguous, accurate, factual.",
                            ListId = 2,
                            ModifiedDate = new DateTime(2024, 5, 4, 12, 47, 43, 394, DateTimeKind.Utc).AddTicks(7781),
                            Name = "Card 6",
                            Priority = 3
                        },
                        new
                        {
                            Id = 7,
                            Description = "Task description should be unambiguous, accurate, factual.",
                            ListId = 2,
                            ModifiedDate = new DateTime(2024, 5, 5, 12, 47, 43, 394, DateTimeKind.Utc).AddTicks(7782),
                            Name = "Card Name 7",
                            Priority = 1
                        },
                        new
                        {
                            Id = 8,
                            Description = "Task description should be unambiguous, accurate, factual.",
                            ListId = 2,
                            ModifiedDate = new DateTime(2024, 5, 6, 12, 47, 43, 394, DateTimeKind.Utc).AddTicks(7783),
                            Name = "Card 8",
                            Priority = 2
                        },
                        new
                        {
                            Id = 9,
                            Description = "Task description should be unambiguous, accurate, factual.",
                            ListId = 2,
                            ModifiedDate = new DateTime(2024, 5, 7, 12, 47, 43, 394, DateTimeKind.Utc).AddTicks(7784),
                            Name = "Card Name 9",
                            Priority = 3
                        },
                        new
                        {
                            Id = 10,
                            Description = "Task description should be unambiguous, accurate, factual.",
                            ListId = 2,
                            ModifiedDate = new DateTime(2024, 5, 8, 12, 47, 43, 394, DateTimeKind.Utc).AddTicks(7786),
                            Name = "Card 10",
                            Priority = 1
                        });
                });

            modelBuilder.Entity("TaskBoard.API.Entities.List", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Lists");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "First List"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Second List"
                        });
                });

            modelBuilder.Entity("TaskBoard.API.Entities.Card", b =>
                {
                    b.HasOne("TaskBoard.API.Entities.List", null)
                        .WithMany("Cards")
                        .HasForeignKey("ListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskBoard.API.Entities.List", b =>
                {
                    b.Navigation("Cards");
                });
#pragma warning restore 612, 618
        }
    }
}
